#version 450

#include "lib/screen_space.glsl"
#include "lib/gbuffer.glsl"

// -------------------------------- I/O --------------------------------

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_normal;

layout(rgba16f, set = 0, binding = 2) uniform writeonly image2D out_color;

layout(push_constant) uniform PushConstants {
	Camera camera;
};




float ssao(ivec2 coord) {
	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

	const float depth = texelFetch(in_depth, coord, 0).x;

	if(is_OOB(depth)) {
		return 0.0;
	}

	vec3 normal;
	float roughness = 0.0;
	unpack_normal(texelFetch(in_normal, coord, 0), normal, roughness);

	const mat4 matrix = inverse(camera.inv_view_proj);
	const vec3 world_pos = unproject(uv, depth, camera.inv_view_proj);

	//return bent_normal(in_depth, depth, normal, uv, 5.0, world_pos, matrix, 64);
	return ambient_occlusion(in_depth, depth, normal, uv, 15.0, world_pos, matrix, 64);
}

void main() {
	const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

	imageStore(out_color, coord, vec4(ssao(coord)));
}


