#version 450

#include "lib/lighting.glsl"
#include "lib/gbuffer.glsl"
#include "lib/shadows.glsl"
#include "lib/ibl.glsl"

// -------------------------------- DEFINES --------------------------------

#define POINT_LIGHTS
#define SPOT_LIGHTS

// -------------------------------- I/O --------------------------------

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_color;
layout(set = 0, binding = 2) uniform sampler2D in_normal;
layout(set = 0, binding = 3) uniform sampler2D in_shadows;

layout(set = 0, binding = 4) uniform CameraData {
	Camera camera;
};

layout(set = 0, binding = 5) readonly buffer PointLights {
	PointLight point_lights[];
};

layout(set = 0, binding = 6) readonly buffer SpotLights {
	SpotLight spot_lights[];
};

layout(set = 0, binding = 7) readonly buffer Shadows {
	ShadowMapParams shadow_params[];
};


layout(rgba16f, set = 0, binding = 8) uniform image2D out_color;


layout(push_constant) uniform PushConstants {
	uint point_count;
	uint spot_count;
	uint shadow_count;
};


// -------------------------------- SHARED --------------------------------

shared uint light_indexes[max_tile_lights];
shared uint tile_point_count;
shared uint tile_spot_count;

shared Frustum4 tile_frustum;


// -------------------------------- HELPERS --------------------------------

uvec2 dispatch_range(uint num) {
	const uint thread_count = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	const uint range = 1 + (num / thread_count);
	const uint begin = min(gl_LocalInvocationIndex * range, num);
	const uint end = min(begin + range, num);
	return uvec2(begin, end);
}


// -------------------------------- CULLING --------------------------------

Frustum4 build_group_frustum() {
	const vec3 ndc_top_left = unproject_ndc(vec3(-1.0, 1.0, 1.0), camera.inv_view_proj);
	const vec3 ndc_bot_left = unproject_ndc(vec3(-1.0, -1.0, 1.0), camera.inv_view_proj); // we can probably deduce than one
	const vec3 ndc_bot_right = unproject_ndc(vec3(1.0, -1.0, 1.0), camera.inv_view_proj);

	const vec3 x_step = (ndc_bot_right - ndc_bot_left) / gl_NumWorkGroups.x;
	const vec3 y_step = (ndc_top_left - ndc_bot_left) / gl_NumWorkGroups.y;

	const vec3 tile_bot_left  = ndc_bot_left + x_step *  gl_WorkGroupID.x      + y_step *  gl_WorkGroupID.y;
	const vec3 tile_bot_right = ndc_bot_left + x_step * (gl_WorkGroupID.x + 1) + y_step *  gl_WorkGroupID.y;
	const vec3 tile_top_left  = ndc_bot_left + x_step *  gl_WorkGroupID.x      + y_step * (gl_WorkGroupID.y + 1);
	const vec3 tile_top_right = ndc_bot_left + x_step * (gl_WorkGroupID.x + 1) + y_step * (gl_WorkGroupID.y + 1);

	const vec3 cam_pos = camera.position;

	Frustum4 frustum;
	frustum.planes[0] = plane(cam_pos, tile_top_left, tile_bot_left);
	frustum.planes[1] = plane(cam_pos, tile_bot_right, tile_top_right);
	frustum.planes[2] = plane(cam_pos, tile_top_right, tile_top_left);
	frustum.planes[3] = plane(cam_pos, tile_bot_left, tile_bot_right);

	//frustum.planes[4] = plane(vec3(tile_top_left.xy, 0.0), vec3(tile_bot_left.xy, 0.0), vec3(tile_bot_right.xy, 0.0));

	return frustum;
}


void cull_points() {
#ifdef POINT_LIGHTS
	const uvec2 range = dispatch_range(point_count);

	for(uint i = range.x; i != range.y; ++i) {
		if(is_inside(tile_frustum, point_lights[i].position, point_lights[i].radius)) {
			uint light_index = atomicAdd(tile_point_count, 1);
			if(light_index >= max_tile_lights) {
				break;
			}
			light_indexes[light_index] = i;
		}
	}
#endif
}

void cull_spots() {
#ifdef SPOT_LIGHTS
	const uvec2 range = dispatch_range(spot_count);

	for(uint i = range.x; i != range.y; ++i) {
		if(is_inside(tile_frustum, spot_lights[i].position, spot_lights[i].radius)) {
			uint light_index = atomicAdd(tile_spot_count, 1) + tile_point_count;
			if(light_index >= max_tile_lights) {
				break;
			}
			light_indexes[light_index] = i;
		}
	}
#endif
}

void cull_lights() {
	if(gl_LocalInvocationIndex == 0) {
		tile_point_count = 0;
		tile_spot_count = 0;
		tile_frustum = build_group_frustum();
	}

	barrier();

	cull_points();

	barrier();

	cull_spots();

	barrier();
}


// -------------------------------- MAIN --------------------------------

void main() {
	const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(imageSize(out_color).xy);

	cull_lights();

	const float depth = texelFetch(in_depth, coord, 0).x;
	vec3 irradiance = imageLoad(out_color, coord).rgb;

	if(!is_OOB(depth)) {
		vec3 albedo;
		float metallic;
		vec3 normal;
		float roughness;
		unpack_color(texelFetch(in_color, coord, 0), albedo, metallic);
		unpack_normal(texelFetch(in_normal, coord, 0), normal, roughness);

		const vec3 world_pos = unproject(uv, depth, camera.inv_view_proj);
		const vec3 view_dir = normalize(camera.position - world_pos);

#ifdef POINT_LIGHTS
		// -------------------------------- POINTS --------------------------------
		const uint point_begin = 0;
		const uint point_end = min(max_tile_lights, tile_point_count);
		for(uint i = point_begin; i != point_end; ++i) {
			const PointLight light = point_lights[light_indexes[i]];

			vec3 light_dir = light.position - world_pos;
			const float distance = length(light_dir);
			light_dir /= distance;
			const float att = attenuation(distance, light.radius, light.falloff);

			const vec3 radiance = light.color * att;
			irradiance += radiance * L0(normal, light_dir, view_dir, roughness, metallic, albedo);
		}
#endif

#ifdef SPOT_LIGHTS
		// -------------------------------- SPOTS --------------------------------
		const uint spot_begin = tile_point_count;
		const uint spot_end = min(max_tile_lights, spot_begin + tile_spot_count);
		for(uint i = spot_begin; i != spot_end; ++i) {
			const SpotLight light = spot_lights[light_indexes[i]];

			vec3 light_dir = light.position - world_pos;
			const float distance = length(light_dir);
			light_dir /= distance;

			const float spot = pow(max(0.0, (dot(light_dir, light.forward) - light.cos_angle) / (1.0 - light.cos_angle)), light.angle_exp);
			float att = spot * attenuation(distance, light.radius, light.falloff);

			if(att > 0.0 && light.shadow_map_index < 0xFFFFFFFF) {
				const ShadowMapParams params = shadow_params[light.shadow_map_index];
				att *= compute_shadow(in_shadows, params, world_pos);
			}

			const vec3 radiance = light.color * att;
			irradiance += radiance * L0(normal, light_dir, view_dir, roughness, metallic, albedo);
		}
	}
#endif

	imageStore(out_color, coord, vec4(irradiance, 1.0));
}


